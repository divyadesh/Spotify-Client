if (WIN32)
	target_compile_definitions(${PROJECT_NAME} PUBLIC USE_KEYCHAIN)
	target_compile_definitions(${PROJECT_NAME} PRIVATE KEYCHAIN_WINDOWS)
	target_sources(${PROJECT_NAME} PRIVATE src/keychain/keychain_win.cpp)
	target_link_libraries(${PROJECT_NAME} PRIVATE crypt32)
elseif (APPLE)
	find_library(COREFOUNDATION_LIBRARY CoreFoundation QUIET)
	find_library(SECURITY_LIBRARY Security QUIET)
	if (COREFOUNDATION_LIBRARY AND SECURITY_LIBRARY)
		target_compile_definitions(${PROJECT_NAME} PUBLIC USE_KEYCHAIN)
		target_compile_definitions(${PROJECT_NAME} PRIVATE KEYCHAIN_MACOS)
		target_sources(${PROJECT_NAME} PRIVATE src/keychain/keychain_mac.cpp)
		target_link_libraries(${PROJECT_NAME} PRIVATE ${COREFOUNDATION_LIBRARY} ${SECURITY_LIBRARY})
	endif ()
elseif (UNIX AND NOT ANDROID)
	find_package(PkgConfig QUIET)
	if (PkgConfig_FOUND)
		pkg_check_modules(GLIB2 IMPORTED_TARGET glib-2.0 QUIET)
		pkg_check_modules(LIBSECRET IMPORTED_TARGET libsecret-1 QUIET)
		if (GLIB2_FOUND AND LIBSECRET_FOUND)
			target_compile_definitions(${PROJECT_NAME} PUBLIC USE_KEYCHAIN)
			target_compile_definitions(${PROJECT_NAME} PRIVATE KEYCHAIN_LINUX)
			target_sources(${PROJECT_NAME} PRIVATE src/keychain/keychain_linux.cpp)
			target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::GLIB2 PkgConfig::LIBSECRET)
		endif ()
	endif ()
endif ()